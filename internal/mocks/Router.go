// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"
	http "net/http"

	jsonrpc "github.com/satsuma-data/node-gateway/internal/jsonrpc"
	mock "github.com/stretchr/testify/mock"
)

// Router is an autogenerated mock type for the Router type
type Router struct {
	mock.Mock
}

// IsInitialized provides a mock function with given fields:
func (_m *Router) IsInitialized() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Route provides a mock function with given fields: ctx, batchRequest
func (_m *Router) Route(ctx context.Context, batchRequest jsonrpc.RequestBody) (*jsonrpc.BatchResponseBody, *http.Response, error) {
	ret := _m.Called(ctx, batchRequest)

	var r0 *jsonrpc.BatchResponseBody
	if rf, ok := ret.Get(0).(func(context.Context, jsonrpc.RequestBody) *jsonrpc.BatchResponseBody); ok {
		r0 = rf(ctx, batchRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jsonrpc.BatchResponseBody)
		}
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(context.Context, jsonrpc.RequestBody) *http.Response); ok {
		r1 = rf(ctx, batchRequest)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, jsonrpc.RequestBody) error); ok {
		r2 = rf(ctx, batchRequest)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Start provides a mock function with given fields:
func (_m *Router) Start() {
	_m.Called()
}

type mockConstructorTestingTNewRouter interface {
	mock.TestingT
	Cleanup(func())
}

// NewRouter creates a new instance of Router. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRouter(t mockConstructorTestingTNewRouter) *Router {
	mock := &Router{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
