// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	config "github.com/satsuma-data/node-gateway/internal/config"
	mock "github.com/stretchr/testify/mock"

	types "github.com/satsuma-data/node-gateway/internal/types"
)

// ErrorLatencyChecker is an autogenerated mock type for the ErrorLatencyChecker type
type ErrorLatencyChecker struct {
	mock.Mock
}

type ErrorLatencyChecker_Expecter struct {
	mock *mock.Mock
}

func (_m *ErrorLatencyChecker) EXPECT() *ErrorLatencyChecker_Expecter {
	return &ErrorLatencyChecker_Expecter{mock: &_m.Mock}
}

// GetUnhealthyReason provides a mock function with given fields: methods
func (_m *ErrorLatencyChecker) GetUnhealthyReason(methods []string) config.UnhealthyReason {
	ret := _m.Called(methods)

	if len(ret) == 0 {
		panic("no return value specified for GetUnhealthyReason")
	}

	var r0 config.UnhealthyReason
	if rf, ok := ret.Get(0).(func([]string) config.UnhealthyReason); ok {
		r0 = rf(methods)
	} else {
		r0 = ret.Get(0).(config.UnhealthyReason)
	}

	return r0
}

// ErrorLatencyChecker_GetUnhealthyReason_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUnhealthyReason'
type ErrorLatencyChecker_GetUnhealthyReason_Call struct {
	*mock.Call
}

// GetUnhealthyReason is a helper method to define mock.On call
//   - methods []string
func (_e *ErrorLatencyChecker_Expecter) GetUnhealthyReason(methods interface{}) *ErrorLatencyChecker_GetUnhealthyReason_Call {
	return &ErrorLatencyChecker_GetUnhealthyReason_Call{Call: _e.mock.On("GetUnhealthyReason", methods)}
}

func (_c *ErrorLatencyChecker_GetUnhealthyReason_Call) Run(run func(methods []string)) *ErrorLatencyChecker_GetUnhealthyReason_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string))
	})
	return _c
}

func (_c *ErrorLatencyChecker_GetUnhealthyReason_Call) Return(_a0 config.UnhealthyReason) *ErrorLatencyChecker_GetUnhealthyReason_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ErrorLatencyChecker_GetUnhealthyReason_Call) RunAndReturn(run func([]string) config.UnhealthyReason) *ErrorLatencyChecker_GetUnhealthyReason_Call {
	_c.Call.Return(run)
	return _c
}

// RecordRequest provides a mock function with given fields: data
func (_m *ErrorLatencyChecker) RecordRequest(data *types.RequestData) {
	_m.Called(data)
}

// ErrorLatencyChecker_RecordRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecordRequest'
type ErrorLatencyChecker_RecordRequest_Call struct {
	*mock.Call
}

// RecordRequest is a helper method to define mock.On call
//   - data *types.RequestData
func (_e *ErrorLatencyChecker_Expecter) RecordRequest(data interface{}) *ErrorLatencyChecker_RecordRequest_Call {
	return &ErrorLatencyChecker_RecordRequest_Call{Call: _e.mock.On("RecordRequest", data)}
}

func (_c *ErrorLatencyChecker_RecordRequest_Call) Run(run func(data *types.RequestData)) *ErrorLatencyChecker_RecordRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*types.RequestData))
	})
	return _c
}

func (_c *ErrorLatencyChecker_RecordRequest_Call) Return() *ErrorLatencyChecker_RecordRequest_Call {
	_c.Call.Return()
	return _c
}

func (_c *ErrorLatencyChecker_RecordRequest_Call) RunAndReturn(run func(*types.RequestData)) *ErrorLatencyChecker_RecordRequest_Call {
	_c.Call.Return(run)
	return _c
}

// RunPassiveCheck provides a mock function with given fields:
func (_m *ErrorLatencyChecker) RunPassiveCheck() {
	_m.Called()
}

// ErrorLatencyChecker_RunPassiveCheck_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RunPassiveCheck'
type ErrorLatencyChecker_RunPassiveCheck_Call struct {
	*mock.Call
}

// RunPassiveCheck is a helper method to define mock.On call
func (_e *ErrorLatencyChecker_Expecter) RunPassiveCheck() *ErrorLatencyChecker_RunPassiveCheck_Call {
	return &ErrorLatencyChecker_RunPassiveCheck_Call{Call: _e.mock.On("RunPassiveCheck")}
}

func (_c *ErrorLatencyChecker_RunPassiveCheck_Call) Run(run func()) *ErrorLatencyChecker_RunPassiveCheck_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ErrorLatencyChecker_RunPassiveCheck_Call) Return() *ErrorLatencyChecker_RunPassiveCheck_Call {
	_c.Call.Return()
	return _c
}

func (_c *ErrorLatencyChecker_RunPassiveCheck_Call) RunAndReturn(run func()) *ErrorLatencyChecker_RunPassiveCheck_Call {
	_c.Call.Return(run)
	return _c
}

// NewErrorLatencyChecker creates a new instance of ErrorLatencyChecker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewErrorLatencyChecker(t interface {
	mock.TestingT
	Cleanup(func())
}) *ErrorLatencyChecker {
	mock := &ErrorLatencyChecker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
